/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface RaindropsAbiInterface extends ethers.utils.Interface {
  functions: {
    "addFunds()": FunctionFragment;
    "addTickets(string,uint256,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyTicket(uint256)": FunctionFragment;
    "createNewEvent(string,string,uint256,uint256,uint256)": FunctionFragment;
    "creatorPercent()": FunctionFragment;
    "delistTicket(uint256)": FunctionFragment;
    "depositAmount()": FunctionFragment;
    "depositBalance()": FunctionFragment;
    "eventNumberToEventName(uint256)": FunctionFragment;
    "getAccountBalance(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getEventInfo(string)": FunctionFragment;
    "getTicketInfo(uint256)": FunctionFragment;
    "getTokenURI(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "listTicket(uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "protocolPercent()": FunctionFragment;
    "protocolTreasury()": FunctionFragment;
    "redeemTickets(uint256[],bool[])": FunctionFragment;
    "redemptionManager()": FunctionFragment;
    "removeFunds(uint256)": FunctionFragment;
    "removeFundsTreasury(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setCreatorPercent(uint16)": FunctionFragment;
    "setDepositAmount(uint256)": FunctionFragment;
    "setProtocolPercent(uint16)": FunctionFragment;
    "setTokenURI(uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalEvents()": FunctionFragment;
    "totalTickets()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryManager()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addFunds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTickets",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewEvent",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delistTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventNumberToEventName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listTicket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTickets",
    values: [BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFundsTreasury",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNewEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventNumberToEventName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFundsTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryManager",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "depositAmountUpdated(uint256,uint256)": EventFragment;
    "eventCreated(string,string,uint256,uint256,uint256)": EventFragment;
    "newTicketsForEvent(string,uint256,uint256)": EventFragment;
    "resalePercentUpdated(uint256,uint256)": EventFragment;
    "ticketDelisted(uint256)": EventFragment;
    "ticketListed(uint256,uint256)": EventFragment;
    "ticketRedemption(string,uint256,address)": EventFragment;
    "ticketSold(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "treasuryFundsRemoved(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "depositAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newTicketsForEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "resalePercentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ticketDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ticketListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ticketRedemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ticketSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "treasuryFundsRemoved"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type depositAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldDepositAmount: BigNumber; newDepositAmount: BigNumber }
>;

export type depositAmountUpdatedEventFilter =
  TypedEventFilter<depositAmountUpdatedEvent>;

export type eventCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    eventName: string;
    description: string;
    eventDate: BigNumber;
    numberTickets: BigNumber;
    ticketPrice: BigNumber;
  }
>;

export type eventCreatedEventFilter = TypedEventFilter<eventCreatedEvent>;

export type newTicketsForEventEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { eventName: string; numberTickets: BigNumber; ticketPrice: BigNumber }
>;

export type newTicketsForEventEventFilter =
  TypedEventFilter<newTicketsForEventEvent>;

export type resalePercentUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldResalePercent: BigNumber; newResalePercent: BigNumber }
>;

export type resalePercentUpdatedEventFilter =
  TypedEventFilter<resalePercentUpdatedEvent>;

export type ticketDelistedEvent = TypedEvent<
  [BigNumber],
  { ticketNumber: BigNumber }
>;

export type ticketDelistedEventFilter = TypedEventFilter<ticketDelistedEvent>;

export type ticketListedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { ticketNumber: BigNumber; price: BigNumber }
>;

export type ticketListedEventFilter = TypedEventFilter<ticketListedEvent>;

export type ticketRedemptionEvent = TypedEvent<
  [string, BigNumber, string],
  { eventName: string; ticketNumber: BigNumber; ticketOwner: string }
>;

export type ticketRedemptionEventFilter =
  TypedEventFilter<ticketRedemptionEvent>;

export type ticketSoldEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  {
    ticketNumber: BigNumber;
    seller: string;
    buyer: string;
    amount: BigNumber;
    creatorFees: BigNumber;
    protocolFees: BigNumber;
  }
>;

export type ticketSoldEventFilter = TypedEventFilter<ticketSoldEvent>;

export type treasuryFundsRemovedEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; amount: BigNumber }
>;

export type treasuryFundsRemovedEventFilter =
  TypedEventFilter<treasuryFundsRemovedEvent>;

export interface RaindropsAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RaindropsAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFunds(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTickets(
      eventName: string,
      numberTickets: BigNumberish,
      ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTicket(
      ticketNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewEvent(
      eventName: string,
      eventDescription: string,
      eventDate: BigNumberish,
      numberTickets: BigNumberish,
      ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creatorPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    delistTicket(
      ticketNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventNumberToEventName(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAccountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEventInfo(
      eventName: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, boolean] & {
        name: string;
        description: string;
        date: BigNumber;
        ticketCount: BigNumber;
        owner: string;
        exists: boolean;
      }
    >;

    getTicketInfo(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string, boolean, boolean] & {
        eventName: string;
        deposit: BigNumber;
        price: BigNumber;
        uri: string;
        owner: string;
        forSale: boolean;
        redeemed: boolean;
      }
    >;

    getTokenURI(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listTicket(
      ticketNumber: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    protocolPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolTreasury(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemTickets(
      ticketNumbers: BigNumberish[],
      expired: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redemptionManager(overrides?: CallOverrides): Promise<[string]>;

    removeFunds(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFundsTreasury(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreatorPercent(
      newCreatorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositAmount(
      newDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolPercent(
      newProtocolPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenURI(
      ticketNumber: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalEvents(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTickets(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryManager(overrides?: CallOverrides): Promise<[string]>;
  };

  addFunds(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTickets(
    eventName: string,
    numberTickets: BigNumberish,
    ticketPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyTicket(
    ticketNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewEvent(
    eventName: string,
    eventDescription: string,
    eventDate: BigNumberish,
    numberTickets: BigNumberish,
    ticketPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creatorPercent(overrides?: CallOverrides): Promise<BigNumber>;

  delistTicket(
    ticketNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  depositBalance(overrides?: CallOverrides): Promise<BigNumber>;

  eventNumberToEventName(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAccountBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEventInfo(
    eventName: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, string, boolean] & {
      name: string;
      description: string;
      date: BigNumber;
      ticketCount: BigNumber;
      owner: string;
      exists: boolean;
    }
  >;

  getTicketInfo(
    ticketNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, string, boolean, boolean] & {
      eventName: string;
      deposit: BigNumber;
      price: BigNumber;
      uri: string;
      owner: string;
      forSale: boolean;
      redeemed: boolean;
    }
  >;

  getTokenURI(
    ticketNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listTicket(
    ticketNumber: BigNumberish,
    salePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  protocolPercent(overrides?: CallOverrides): Promise<BigNumber>;

  protocolTreasury(overrides?: CallOverrides): Promise<BigNumber>;

  redeemTickets(
    ticketNumbers: BigNumberish[],
    expired: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redemptionManager(overrides?: CallOverrides): Promise<string>;

  removeFunds(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFundsTreasury(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreatorPercent(
    newCreatorPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositAmount(
    newDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolPercent(
    newProtocolPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenURI(
    ticketNumber: BigNumberish,
    _tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalEvents(overrides?: CallOverrides): Promise<BigNumber>;

  totalTickets(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addFunds(overrides?: CallOverrides): Promise<BigNumber>;

    addTickets(
      eventName: string,
      numberTickets: BigNumberish,
      ticketPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyTicket(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewEvent(
      eventName: string,
      eventDescription: string,
      eventDate: BigNumberish,
      numberTickets: BigNumberish,
      ticketPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    creatorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    delistTicket(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    depositBalance(overrides?: CallOverrides): Promise<BigNumber>;

    eventNumberToEventName(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEventInfo(
      eventName: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, boolean] & {
        name: string;
        description: string;
        date: BigNumber;
        ticketCount: BigNumber;
        owner: string;
        exists: boolean;
      }
    >;

    getTicketInfo(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string, boolean, boolean] & {
        eventName: string;
        deposit: BigNumber;
        price: BigNumber;
        uri: string;
        owner: string;
        forSale: boolean;
        redeemed: boolean;
      }
    >;

    getTokenURI(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listTicket(
      ticketNumber: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    protocolPercent(overrides?: CallOverrides): Promise<BigNumber>;

    protocolTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    redeemTickets(
      ticketNumbers: BigNumberish[],
      expired: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    redemptionManager(overrides?: CallOverrides): Promise<string>;

    removeFunds(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFundsTreasury(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreatorPercent(
      newCreatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositAmount(
      newDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolPercent(
      newProtocolPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURI(
      ticketNumber: BigNumberish,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalEvents(overrides?: CallOverrides): Promise<BigNumber>;

    totalTickets(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "depositAmountUpdated(uint256,uint256)"(
      oldDepositAmount?: null,
      newDepositAmount?: null
    ): depositAmountUpdatedEventFilter;
    depositAmountUpdated(
      oldDepositAmount?: null,
      newDepositAmount?: null
    ): depositAmountUpdatedEventFilter;

    "eventCreated(string,string,uint256,uint256,uint256)"(
      eventName?: null,
      description?: null,
      eventDate?: null,
      numberTickets?: null,
      ticketPrice?: null
    ): eventCreatedEventFilter;
    eventCreated(
      eventName?: null,
      description?: null,
      eventDate?: null,
      numberTickets?: null,
      ticketPrice?: null
    ): eventCreatedEventFilter;

    "newTicketsForEvent(string,uint256,uint256)"(
      eventName?: null,
      numberTickets?: null,
      ticketPrice?: null
    ): newTicketsForEventEventFilter;
    newTicketsForEvent(
      eventName?: null,
      numberTickets?: null,
      ticketPrice?: null
    ): newTicketsForEventEventFilter;

    "resalePercentUpdated(uint256,uint256)"(
      oldResalePercent?: null,
      newResalePercent?: null
    ): resalePercentUpdatedEventFilter;
    resalePercentUpdated(
      oldResalePercent?: null,
      newResalePercent?: null
    ): resalePercentUpdatedEventFilter;

    "ticketDelisted(uint256)"(ticketNumber?: null): ticketDelistedEventFilter;
    ticketDelisted(ticketNumber?: null): ticketDelistedEventFilter;

    "ticketListed(uint256,uint256)"(
      ticketNumber?: null,
      price?: null
    ): ticketListedEventFilter;
    ticketListed(ticketNumber?: null, price?: null): ticketListedEventFilter;

    "ticketRedemption(string,uint256,address)"(
      eventName?: null,
      ticketNumber?: null,
      ticketOwner?: null
    ): ticketRedemptionEventFilter;
    ticketRedemption(
      eventName?: null,
      ticketNumber?: null,
      ticketOwner?: null
    ): ticketRedemptionEventFilter;

    "ticketSold(uint256,address,address,uint256,uint256,uint256)"(
      ticketNumber?: null,
      seller?: null,
      buyer?: null,
      amount?: null,
      creatorFees?: null,
      protocolFees?: null
    ): ticketSoldEventFilter;
    ticketSold(
      ticketNumber?: null,
      seller?: null,
      buyer?: null,
      amount?: null,
      creatorFees?: null,
      protocolFees?: null
    ): ticketSoldEventFilter;

    "treasuryFundsRemoved(address,uint256)"(
      sender?: null,
      amount?: null
    ): treasuryFundsRemovedEventFilter;
    treasuryFundsRemoved(
      sender?: null,
      amount?: null
    ): treasuryFundsRemovedEventFilter;
  };

  estimateGas: {
    addFunds(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTickets(
      eventName: string,
      numberTickets: BigNumberish,
      ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyTicket(
      ticketNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewEvent(
      eventName: string,
      eventDescription: string,
      eventDate: BigNumberish,
      numberTickets: BigNumberish,
      ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creatorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    delistTicket(
      ticketNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    depositBalance(overrides?: CallOverrides): Promise<BigNumber>;

    eventNumberToEventName(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventInfo(
      eventName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketInfo(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenURI(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listTicket(
      ticketNumber: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolPercent(overrides?: CallOverrides): Promise<BigNumber>;

    protocolTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    redeemTickets(
      ticketNumbers: BigNumberish[],
      expired: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redemptionManager(overrides?: CallOverrides): Promise<BigNumber>;

    removeFunds(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFundsTreasury(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreatorPercent(
      newCreatorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositAmount(
      newDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolPercent(
      newProtocolPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenURI(
      ticketNumber: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEvents(overrides?: CallOverrides): Promise<BigNumber>;

    totalTickets(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addFunds(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTickets(
      eventName: string,
      numberTickets: BigNumberish,
      ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTicket(
      ticketNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewEvent(
      eventName: string,
      eventDescription: string,
      eventDate: BigNumberish,
      numberTickets: BigNumberish,
      ticketPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creatorPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delistTicket(
      ticketNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventNumberToEventName(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventInfo(
      eventName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketInfo(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenURI(
      ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listTicket(
      ticketNumber: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemTickets(
      ticketNumbers: BigNumberish[],
      expired: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redemptionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFunds(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFundsTreasury(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreatorPercent(
      newCreatorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositAmount(
      newDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolPercent(
      newProtocolPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      ticketNumber: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTickets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
